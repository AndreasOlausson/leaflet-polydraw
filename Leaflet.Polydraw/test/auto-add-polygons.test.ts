import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';
import * as L from 'leaflet';
import Polydraw from '../src/polydraw';
import './setup';

describe('Auto-add polygons functionality', () => {
  let map: L.Map;
  let polydraw: Polydraw;
  let mapContainer: HTMLElement;

  beforeEach(() => {
    // Create a map container
    mapContainer = document.createElement('div');
    mapContainer.id = 'test-map';
    mapContainer.style.width = '800px';
    mapContainer.style.height = '600px';
    document.body.appendChild(mapContainer);

    // Initialize map
    map = L.map(mapContainer).setView([58.402514, 15.606188], 13);

    // Initialize Polydraw
    polydraw = new Polydraw();
    (polydraw as any).addTo(map);
  });

  afterEach(() => {
    // Clean up
    if (map) {
      map.remove();
    }
    if (mapContainer && mapContainer.parentNode) {
      mapContainer.parentNode.removeChild(mapContainer);
    }
  });

  describe('Octagon polygon', () => {
    const octagon: L.LatLng[][][] = [
      [
        [
          L.latLng(58.404493, 15.6),
          L.latLng(58.402928, 15.602928),
          L.latLng(58.4, 15.604493),
          L.latLng(58.397072, 15.602928),
          L.latLng(58.395507, 15.6),
          L.latLng(58.397072, 15.597072),
          L.latLng(58.4, 15.595507),
          L.latLng(58.402928, 15.597072),
          L.latLng(58.404493, 15.6), // Close the polygon
        ],
      ],
    ];

    it('should successfully add an octagon polygon', () => {
      expect(() => {
        polydraw.addAutoPolygon(octagon);
      }).not.toThrow();
    });

    it('should have correct number of coordinates for octagon', () => {
      expect(octagon[0][0]).toHaveLength(9); // 8 vertices + closing point
    });

    it('should have properly closed octagon (first and last points match)', () => {
      const firstPoint = octagon[0][0][0];
      const lastPoint = octagon[0][0][8];

      expect(firstPoint.lat).toBe(lastPoint.lat);
      expect(firstPoint.lng).toBe(lastPoint.lng);
    });

    it('should create valid LatLng objects', () => {
      octagon[0][0].forEach((point) => {
        expect(point).toBeInstanceOf(L.LatLng);
        expect(typeof point.lat).toBe('number');
        expect(typeof point.lng).toBe('number');
        expect(point.lat).toBeGreaterThan(-90);
        expect(point.lat).toBeLessThan(90);
        expect(point.lng).toBeGreaterThan(-180);
        expect(point.lng).toBeLessThan(180);
      });
    });
  });

  describe('Square with hole polygon', () => {
    const squareWithHole: L.LatLng[][][] = [
      [
        // Outer square (counter-clockwise)
        [
          L.latLng(58.407, 15.597),
          L.latLng(58.407, 15.603),
          L.latLng(58.397, 15.603),
          L.latLng(58.397, 15.597),
          L.latLng(58.407, 15.597),
        ],
        // Inner square (clockwise, as hole)
        [
          L.latLng(58.403, 15.599),
          L.latLng(58.403, 15.601),
          L.latLng(58.401, 15.601),
          L.latLng(58.401, 15.599),
          L.latLng(58.403, 15.599),
        ],
      ],
    ];

    it('should successfully add a square with hole polygon', () => {
      expect(() => {
        polydraw.addAutoPolygon(squareWithHole);
      }).not.toThrow();
    });

    it('should have correct structure for polygon with hole', () => {
      expect(squareWithHole).toHaveLength(1); // One polygon
      expect(squareWithHole[0]).toHaveLength(2); // Outer ring + hole
      expect(squareWithHole[0][0]).toHaveLength(5); // Outer square (4 vertices + closing)
      expect(squareWithHole[0][1]).toHaveLength(5); // Inner square (4 vertices + closing)
    });

    it('should have properly closed outer and inner rings', () => {
      // Check outer ring
      const outerRing = squareWithHole[0][0];
      expect(outerRing[0].lat).toBe(outerRing[4].lat);
      expect(outerRing[0].lng).toBe(outerRing[4].lng);

      // Check inner ring (hole)
      const innerRing = squareWithHole[0][1];
      expect(innerRing[0].lat).toBe(innerRing[4].lat);
      expect(innerRing[0].lng).toBe(innerRing[4].lng);
    });

    it('should have hole completely inside outer polygon', () => {
      const outerRing = squareWithHole[0][0];
      const innerRing = squareWithHole[0][1];

      // Get bounds of outer ring
      const outerMinLat = Math.min(...outerRing.map((p) => p.lat));
      const outerMaxLat = Math.max(...outerRing.map((p) => p.lat));
      const outerMinLng = Math.min(...outerRing.map((p) => p.lng));
      const outerMaxLng = Math.max(...outerRing.map((p) => p.lng));

      // Check that all inner ring points are within outer bounds
      innerRing.forEach((point) => {
        expect(point.lat).toBeGreaterThan(outerMinLat);
        expect(point.lat).toBeLessThan(outerMaxLat);
        expect(point.lng).toBeGreaterThan(outerMinLng);
        expect(point.lng).toBeLessThan(outerMaxLng);
      });
    });
  });

  describe('Complex polygon (lkpg) with coordinate format issues', () => {
    // This is the actual lkpg polygon from main.ts - it has MANY coordinates
    // and uses [lng, lat] format instead of [lat, lng] which causes issues
    const lkpgPolygon: any = [
      [
        [
          [15.612239, 58.621761],
          [15.611612, 58.622466],
          [15.61012, 58.623898],
          [15.607075, 58.626891],
          [15.605318, 58.628121],
          [15.604815, 58.628474],
          [15.604301, 58.628834],
          [15.598969, 58.632572],
          [15.598731, 58.63271],
          [15.589027, 58.633655],
          [15.580448, 58.636204],
          [15.580106, 58.636341],
          [15.58005, 58.636227],
          [15.578705, 58.633503],
          [15.573214, 58.622402],
          [15.57281, 58.621586],
          [15.566578, 58.612588],
          [15.54934, 58.607271],
          [15.547136, 58.606553],
          [15.545568, 58.606108],
          [15.539497, 58.604218],
          [15.533263, 58.602288],
          [15.52867, 58.600858],
          [15.526344, 58.60017],
          [15.53608, 58.605523],
          [15.535783, 58.606088],
          [15.535457, 58.60676],
          [15.535082, 58.607459],
          [15.534608, 58.608403],
          [15.534155, 58.609304],
          [15.533418, 58.610696],
          [15.533342, 58.61084],
          [15.532725, 58.612104],
          [15.532365, 58.61285],
          [15.532261, 58.613064],
          [15.532751, 58.613474],
          [15.53329, 58.614086],
          [15.533935, 58.614896],
          [15.534317, 58.615397],
          [15.534442, 58.615584],
          [15.534522, 58.615769],
          [15.534487, 58.616022],
          [15.534411, 58.61629],
          [15.534313, 58.616699],
          [15.534193, 58.617153],
          [15.534105, 58.617524],
          [15.534105, 58.617791],
          [15.534128, 58.618066],
          [15.534274, 58.618259],
          [15.534512, 58.618473],
          [15.534692, 58.618587],
          [15.534832, 58.61869],
          [15.533558, 58.619962],
          [15.531751, 58.621675],
          [15.532068, 58.622321],
          [15.535073, 58.627427],
          [15.535435, 58.628063],
          [15.537027, 58.627674],
          [15.538423, 58.629326],
          [15.539131, 58.631021],
          [15.540818, 58.63301],
          [15.54068, 58.63375],
          [15.540509, 58.634986],
          [15.540356, 58.636136],
          [15.540295, 58.636814],
          [15.540157, 58.638645],
          [15.539708, 58.640064],
          [15.538382, 58.640029],
          [15.527922, 58.63976],
          [15.51925, 58.639919],
          [15.513104, 58.639287],
          [15.510494, 58.638584],
          [15.509917, 58.638423],
          [15.507293, 58.637701],
          [15.506961, 58.637613],
          [15.503897, 58.636797],
          [15.501082, 58.636484],
          [15.494761, 58.635803],
          [15.492916, 58.635505],
          [15.492099, 58.635372],
          [15.488169, 58.634651],
          [15.475122, 58.632159],
          [15.470026, 58.631753],
          [15.469428, 58.628733],
          [15.460876, 58.631396],
          [15.456199, 58.63298],
          [15.450343, 58.635021],
          [15.450309, 58.635033],
          [15.436154, 58.640016],
          [15.434785, 58.641818],
          [15.434355, 58.641495],
          [15.430601, 58.644483],
          [15.429734, 58.645166],
          [15.417492, 58.652192],
          [15.417337, 58.652182],
          [15.417263, 58.652107],
          [15.417089, 58.651934],
          [15.409809, 58.649466],
          [15.409192, 58.649252],
          [15.408973, 58.649151],
          [15.408474, 58.649163],
          [15.408261, 58.649119],
          [15.408063, 58.649041],
          [15.407768, 58.648706],
          [15.406804, 58.648266],
          [15.406492, 58.648166],
          [15.406245, 58.648088],
          [15.405939, 58.648047],
          [15.405058, 58.64783],
          [15.404357, 58.647686],
          [15.403749, 58.647624],
          [15.402466, 58.647348],
          [15.400805, 58.646964],
          [15.400143, 58.646818],
          [15.399812, 58.646811],
          [15.399178, 58.646653],
          [15.398467, 58.646285],
          [15.398242, 58.646152],
          [15.398248, 58.646089],
          [15.398847, 58.644808],
          [15.399672, 58.641511],
          [15.399251, 58.641345],
          [15.391591, 58.63849],
          [15.390523, 58.637184],
          [15.386178, 58.636397],
          [15.380653, 58.635395],
          [15.37778, 58.633024],
          [15.373945, 58.629858],
          [15.373524, 58.629528],
          [15.37235, 58.628604],
          [15.372758, 58.628377],
          [15.372922, 58.628098],
          [15.37309, 58.627768],
          [15.373213, 58.627431],
          [15.37329, 58.627189],
          [15.373488, 58.626979],
          [15.373602, 58.626872],
          [15.373713, 58.626731],
          [15.373977, 58.626496],
          [15.374095, 58.626329],
          [15.374134, 58.626125],
          [15.374029, 58.625866],
          [15.373898, 58.625511],
          [15.373882, 58.625374],
          [15.373835, 58.625186],
          [15.37404, 58.624885],
          [15.374193, 58.62465],
          [15.373841, 58.62435],
          [15.373427, 58.624017],
          [15.373299, 58.623667],
          [15.373283, 58.623577],
          [15.373218, 58.623491],
          [15.373036, 58.62339],
          [15.372851, 58.623284],
          [15.372818, 58.623192],
          [15.372829, 58.623086],
          [15.372833, 58.622946],
          [15.372769, 58.622754],
          [15.372729, 58.62258],
          [15.372642, 58.622318],
          [15.372626, 58.622113],
          [15.372604, 58.621882],
          [15.371282, 58.617958],
          [15.374985, 58.616388],
          [15.384808, 58.612221],
          [15.390762, 58.608773],
          [15.383906, 58.604102],
          [15.380934, 58.596776],
          [15.381367, 58.594204],
          [15.379897, 58.590936],
          [15.375308, 58.590188],
          [15.374329, 58.590029],
          [15.375333, 58.588151],
          [15.377609, 58.583892],
          [15.381767, 58.57971],
          [15.38028, 58.57733],
          [15.380085, 58.577019],
          [15.379549, 58.57616],
          [15.37712, 58.572336],
          [15.3766, 58.571515],
          [15.375557, 58.569871],
          [15.375132, 58.569201],
          [15.375089, 58.569127],
          [15.374802, 58.568626],
          [15.374723, 58.568488],
          [15.374704, 58.568456],
          [15.37486, 58.568219],
          [15.375591, 58.567105],
          [15.378857, 58.56645],
          [15.378176, 58.563535],
          [15.377678, 58.561402],
          [15.377522, 58.560732],
          [15.37704, 58.557602],
          [15.377006, 58.557321],
          [15.375926, 58.557437],
          [15.376586, 58.556593],
          [15.375733, 58.555532],
          [15.375074, 58.554567],
          [15.374826, 58.553739],
          [15.374149, 58.55373],
          [15.373494, 58.552839],
          [15.374162, 58.552627],
          [15.374259, 58.552594],
          [15.374752, 58.552538],
          [15.37477, 58.552486],
          [15.375091, 58.552581],
          [15.375313, 58.552647],
          [15.375535, 58.552677],
          [15.372365, 58.547644],
          [15.375836, 58.54718],
          [15.383702, 58.546759],
          [15.380416, 58.542115],
          [15.380366, 58.541971],
          [15.380242, 58.541451],
          [15.380178, 58.541184],
          [15.380121, 58.541134],
          [15.379858, 58.540906],
          [15.379049, 58.541168],
          [15.378796, 58.540284],
          [15.37836, 58.538756],
          [15.378092, 58.537862],
          [15.378073, 58.537749],
          [15.378066, 58.537658],
          [15.378148, 58.537052],
          [15.378269, 58.53619],
          [15.378551, 58.534186],
          [15.378817, 58.532126],
          [15.379164, 58.52944],
          [15.379219, 58.529055],
          [15.379232, 58.528961],
          [15.379727, 58.525464],
          [15.380164, 58.522375],
          [15.377882, 58.521298],
          [15.377695, 58.51842],
          [15.377656, 58.517825],
          [15.377446, 58.514579],
          [15.377416, 58.51412],
          [15.377245, 58.511493],
          [15.376273, 58.511427],
          [15.375871, 58.51141],
          [15.374309, 58.511322],
          [15.372872, 58.51124],
          [15.372115, 58.511197],
          [15.371639, 58.51117],
          [15.370404, 58.5111],
          [15.370924, 58.510295],
          [15.371429, 58.509452],
          [15.371645, 58.50909],
          [15.372302, 58.508158],
          [15.372503, 58.507825],
          [15.372507, 58.507818],
          [15.372785, 58.507359],
          [15.373101, 58.506835],
          [15.373668, 58.505917],
          [15.373943, 58.505445],
          [15.374882, 58.503114],
          [15.375546, 58.501465],
          [15.374811, 58.499885],
          [15.369295, 58.4999],
          [15.368846, 58.498643],
          [15.368457, 58.49722],
          [15.368124, 58.49615],
          [15.372959, 58.495924],
          [15.372936, 58.495863],
          [15.372908, 58.495814],
          [15.368006, 58.49597],
          [15.367341, 58.493868],
          [15.36556, 58.493189],
          [15.3638, 58.489853],
          [15.365956, 58.489668],
          [15.365976, 58.488102],
          [15.366499, 58.487915],
          [15.366611, 58.48701],
          [15.364541, 58.486976],
          [15.364487, 58.486578],
          [15.364879, 58.484931],
          [15.365369, 58.483073],
          [15.365375, 58.483052],
          [15.37661, 58.483915],
          [15.378581, 58.484056],
          [15.378749, 58.483639],
          [15.378897, 58.483319],
          [15.379164, 58.483033],
          [15.379545, 58.482729],
          [15.379873, 58.482487],
          [15.380244, 58.482304],
          [15.380602, 58.482067],
          [15.380824, 58.481808],
          [15.380933, 58.481718],
          [15.381391, 58.481482],
          [15.381769, 58.481256],
          [15.382066, 58.48103],
          [15.382184, 58.480799],
          [15.382323, 58.48057],
          [15.382351, 58.480516],
          [15.382482, 58.480257],
          [15.382744, 58.48004],
          [15.383266, 58.479847],
          [15.383647, 58.479792],
          [15.384057, 58.479719],
          [15.384367, 58.479635],
          [15.384569, 58.479513],
          [15.384672, 58.479377],
          [15.384796, 58.479309],
          [15.384897, 58.479254],
          [15.385105, 58.479184],
          [15.385235, 58.479034],
          [15.385372, 58.478898],
          [15.385664, 58.47871],
          [15.385648, 58.478647],
          [15.385659, 58.478465],
          [15.385949, 58.478229],
          [15.386247, 58.47795],
          [15.386419, 58.477759],
          [15.386532, 58.477618],
          [15.386588, 58.477437],
          [15.386528, 58.477349],
          [15.386497, 58.4773],
          [15.386396, 58.477143],
          [15.386093, 58.47691],
          [15.385912, 58.476557],
          [15.384631, 58.476489],
          [15.380311, 58.476261],
          [15.376701, 58.476458],
          [15.375541, 58.476537],
          [15.368707, 58.477004],
          [15.366266, 58.477171],
          [15.365655, 58.475799],
          [15.366964, 58.47399],
          [15.357483, 58.473021],
          [15.358052, 58.471949],
          [15.358672, 58.470781],
          [15.365457, 58.471368],
          [15.36559, 58.471803],
          [15.365836, 58.471967],
          [15.36605, 58.472045],
          [15.367798, 58.472206],
          [15.368312, 58.472231],
          [15.368415, 58.472237],
          [15.372376, 58.472038],
          [15.375904, 58.470963],
          [15.375972, 58.470942],
          [15.376768, 58.470925],
          [15.380577, 58.470838],
          [15.380619, 58.470843],
          [15.384776, 58.471313],
          [15.386046, 58.471457],
          [15.3876, 58.471284],
          [15.389657, 58.471056],
          [15.392891, 58.465115],
          [15.392765, 58.464908],
          [15.392645, 58.464769],
          [15.392512, 58.464736],
          [15.392399, 58.464708],
          [15.391851, 58.46471],
          [15.391303, 58.464705],
          [15.390467, 58.464847],
          [15.389876, 58.465067],
          [15.389468, 58.465214],
          [15.388362, 58.465804],
          [15.387453, 58.466294],
          [15.386961, 58.46653],
          [15.386557, 58.466646],
          [15.386133, 58.466744],
          [15.385639, 58.466768],
          [15.384958, 58.466743],
          [15.384599, 58.466723],
          [15.382827, 58.466249],
          [15.381175, 58.465852],
          [15.380606, 58.465848],
          [15.380235, 58.465884],
          [15.379478, 58.465997],
          [15.378715, 58.466118],
          [15.378441, 58.466097],
          [15.376994, 58.465828],
          [15.376831, 58.465801],
          [15.376014, 58.465572],
          [15.375545, 58.465517],
          [15.375334, 58.465474],
          [15.375222, 58.465461],
          [15.37491, 58.465423],
          [15.374072, 58.465357],
          [15.373696, 58.465304],
          [15.372806, 58.465542],
          [15.372575, 58.465604],
          [15.370823, 58.465731],
          [15.369869, 58.4658],
          [15.369354, 58.465552],
          [15.369244, 58.465492],
          [15.368842, 58.465273],
          [15.368454, 58.465061],
          [15.368587, 58.464217],
          [15.368683, 58.463066],
          [15.367725, 58.462437],
          [15.365849, 58.462181],
          [15.365627, 58.46215],
          [15.36535, 58.462014],
          [15.364509, 58.461631],
          [15.363842, 58.461297],
          [15.363033, 58.46116],
          [15.362047, 58.460972],
          [15.361609, 58.460912],
          [15.361001, 58.460694],
          [15.359917, 58.460299],
          [15.358969, 58.459972],
          [15.358909, 58.459885],
          [15.358776, 58.459759],
          [15.358685, 58.459673],
          [15.358601, 58.459602],
          [15.358312, 58.459357],
          [15.357494, 58.458608],
          [15.35664, 58.457809],
          [15.356635, 58.457717],
          [15.356624, 58.457313],
          [15.356658, 58.457065],
          [15.357159, 58.456471],
          [15.357451, 58.456142],
          [15.357438, 58.456058],
          [15.357401, 58.455822],
          [15.357339, 58.455448],
          [15.357344, 58.455337],
          [15.356972, 58.455126],
          [15.356341, 58.454709],
          [15.355819, 58.454365],
          [15.355444, 58.454139],
          [15.35541, 58.454118],
          [15.354975, 58.453856],
          [15.353682, 58.453066],
          [15.352947, 58.452967],
          [15.3514, 58.452742],
          [15.350912, 58.452694],
          [15.35017, 58.452601],
          [15.3496, 58.45251],
          [15.349317, 58.452466],
          [15.348986, 58.452403],
          [15.348378, 58.452326],
          [15.347665, 58.45222],
          [15.347292, 58.452176],
          [15.34667, 58.452113],
          [15.345992, 58.452081],
          [15.345722, 58.45206],
          [15.345427, 58.45206],
          [15.344948, 58.452024],
          [15.34466, 58.452044],
          [15.343929, 58.451946],
          [15.343475, 58.45188],
          [15.343148, 58.451798],
          [15.34289, 58.451729],
          [15.342605, 58.451604],
          [15.34245, 58.451539],
          [15.342208, 58.451437],
          [15.341967, 58.451333],
          [15.341605, 58.451181],
          [15.341414, 58.451131],
          [15.341019, 58.451034],
          [15.340658, 58.450947],
          [15.33998, 58.450797],
          [15.339533, 58.45072],
          [15.339032, 58.450616],
          [15.338609, 58.450518],
          [15.338125, 58.450423],
          [15.337829, 58.450346],
          [15.337692, 58.450338],
          [15.33751, 58.450331],
          [15.337257, 58.450335],
          [15.337188, 58.450343],
          [15.336868, 58.450381],
          [15.336125, 58.450496],
          [15.335809, 58.450522],
          [15.335637, 58.450557],
          [15.33542, 58.450615],
          [15.335012, 58.450616],
          [15.334159, 58.45061],
          [15.333923, 58.450598],
          [15.333583, 58.45062],
          [15.332472, 58.450683],
          [15.332115, 58.450641],
          [15.332068, 58.450635],
          [15.332033, 58.450617],
          [15.331899, 58.45055],
          [15.331239, 58.450378],
          [15.330854, 58.450297],
          [15.329704, 58.449965],
          [15.329269, 58.449799],
          [15.328814, 58.449635],
          [15.32804, 58.449372],
          [15.327257, 58.449046],
          [15.32706, 58.44896],
          [15.326883, 58.448926],
          [15.326736, 58.448907],
          [15.326527, 58.44889],
          [15.326249, 58.448908],
          [15.325935, 58.448862],
          [15.325719, 58.448859],
          [15.325315, 58.448864],
          [15.325089, 58.448858],
          [15.324818, 58.448871],
          [15.324572, 58.448855],
          [15.324284, 58.448853],
          [15.324048, 58.448851],
          [15.323666, 58.448899],
          [15.323429, 58.448922],
          [15.323282, 58.448925],
          [15.322928, 58.448933],
          [15.32275, 58.44893],
          [15.322479, 58.448955],
          [15.322215, 58.448966],
          [15.322054, 58.44896],
          [15.321925, 58.448899],
          [15.321755, 58.448868],
          [15.321612, 58.448829],
          [15.321561, 58.448796],
          [15.321504, 58.448755],
          [15.321458, 58.448697],
          [15.321405, 58.448601],
          [15.321366, 58.44851],
          [15.321414, 58.448408],
          [15.321467, 58.448318],
          [15.321548, 58.448243],
          [15.321742, 58.448015],
          [15.321923, 58.447781],
          [15.322155, 58.447533],
          [15.322149, 58.447122],
          [15.321896, 58.446675],
          [15.3218, 58.446536],
          [15.321739, 58.446393],
          [15.321694, 58.446289],
          [15.321725, 58.446131],
          [15.321749, 58.446004],
          [15.321817, 58.445875],
          [15.321884, 58.4458],
          [15.321886, 58.44571],
          [15.321838, 58.445571],
          [15.321803, 58.445487],
          [15.321756, 58.445424],
          [15.321743, 58.445266],
          [15.32167, 58.44517],
          [15.321543, 58.445067],
          [15.321429, 58.444964],
          [15.3213, 58.444801],
          [15.321248, 58.444659],
          [15.321189, 58.44457],
          [15.321168, 58.444448],
          [15.321103, 58.444329],
          [15.321049, 58.44427],
          [15.320954, 58.4441],
          [15.320852, 58.443938],
          [15.32079, 58.443812],
          [15.320705, 58.443673],
          [15.320646, 58.443552],
          [15.320554, 58.443395],
          [15.320492, 58.443291],
          [15.320433, 58.443156],
          [15.320311, 58.443002],
          [15.320156, 58.442746],
          [15.319812, 58.442137],
          [15.319755, 58.44197],
          [15.319728, 58.441929],
          [15.319535, 58.441656],
          [15.319326, 58.441377],
          [15.612239, 58.621761], // Close the polygon
        ],
      ],
    ];

    it('should have many coordinates (hundreds)', () => {
      // The lkpg polygon should have a very large number of coordinates
      expect(lkpgPolygon[0][0].length).toBeGreaterThan(100);
    });

    it('should detect wrong coordinate format [lng, lat] instead of [lat, lng]', () => {
      const firstCoord = lkpgPolygon[0][0][0];

      // In Sweden, longitude should be around 15-16, latitude around 58-59
      // If first value is ~15 and second is ~58, it's [lng, lat] format (wrong for Leaflet)
      expect(firstCoord[0]).toBeCloseTo(15.6, 1); // longitude
      expect(firstCoord[1]).toBeCloseTo(58.6, 1); // latitude

      // This indicates [lng, lat] format which is wrong for Leaflet
      // Leaflet expects [lat, lng] format
    });

    it('should fail when trying to add polygon with wrong coordinate format', () => {
      expect(() => {
        polydraw.addAutoPolygon(lkpgPolygon);
      }).toThrow();
    });

    it('should work when coordinates are converted to correct format', () => {
      // Convert from [lng, lat] to [lat, lng] format
      const correctedPolygon = lkpgPolygon.map((polygon: any) =>
        polygon.map(
          (ring: any) => ring.map((coord: any) => L.latLng(coord[1], coord[0])), // swap lat/lng
        ),
      );

      expect(() => {
        polydraw.addAutoPolygon(correctedPolygon);
      }).not.toThrow();
    });
  });

  describe('Overlapping squares (should fail due to merge error)', () => {
    const overlappingSquares: L.LatLng[][][] = [
      [
        [
          L.latLng(58.405, 15.595),
          L.latLng(58.405, 15.6),
          L.latLng(58.4, 15.6),
          L.latLng(58.4, 15.595),
          L.latLng(58.405, 15.595),
        ],
      ],
      [
        [
          L.latLng(58.403, 15.598),
          L.latLng(58.403, 15.603),
          L.latLng(58.398, 15.603),
          L.latLng(58.398, 15.598),
          L.latLng(58.403, 15.598),
        ],
      ],
    ];

    it('should have correct structure for overlapping squares', () => {
      expect(overlappingSquares).toHaveLength(2); // Two separate polygons
      expect(overlappingSquares[0][0]).toHaveLength(5); // First square
      expect(overlappingSquares[1][0]).toHaveLength(5); // Second square
    });

    it('should have properly closed squares', () => {
      overlappingSquares.forEach((polygon, index) => {
        const ring = polygon[0];
        expect(ring[0].lat).toBe(ring[4].lat);
        expect(ring[0].lng).toBe(ring[4].lng);
      });
    });

    it('should detect overlap between the two squares', () => {
      const square1 = overlappingSquares[0][0];
      const square2 = overlappingSquares[1][0];

      // Get bounds of both squares
      const square1Bounds = {
        minLat: Math.min(...square1.map((p) => p.lat)),
        maxLat: Math.max(...square1.map((p) => p.lat)),
        minLng: Math.min(...square1.map((p) => p.lng)),
        maxLng: Math.max(...square1.map((p) => p.lng)),
      };

      const square2Bounds = {
        minLat: Math.min(...square2.map((p) => p.lat)),
        maxLat: Math.max(...square2.map((p) => p.lat)),
        minLng: Math.min(...square2.map((p) => p.lng)),
        maxLng: Math.max(...square2.map((p) => p.lng)),
      };

      // Check for overlap
      const hasOverlap = !(
        square1Bounds.maxLat <= square2Bounds.minLat ||
        square1Bounds.minLat >= square2Bounds.maxLat ||
        square1Bounds.maxLng <= square2Bounds.minLng ||
        square1Bounds.minLng >= square2Bounds.maxLng
      );

      expect(hasOverlap).toBe(true);
    });

    it('should successfully merge overlapping squares', () => {
      // Mock console.error to capture any warnings
      const consoleSpy = vi.spyOn(console, 'error').mockImplementation(() => {});

      // This should now succeed and merge the overlapping squares
      expect(() => {
        polydraw.addAutoPolygon(overlappingSquares);
      }).not.toThrow();

      consoleSpy.mockRestore();
    });

    it('should handle individual squares without error', () => {
      // Test adding each square individually (should work)
      expect(() => {
        polydraw.addAutoPolygon([overlappingSquares[0]]);
      }).not.toThrow();

      // Reset polydraw for second test
      polydraw.removeAllFeatureGroups();

      expect(() => {
        polydraw.addAutoPolygon([overlappingSquares[1]]);
      }).not.toThrow();
    });
  });

  describe('General polygon validation', () => {
    it('should reject invalid polygon structures', () => {
      const invalidPolygon: any = [
        [
          [
            // Missing closing point
            L.latLng(58.4, 15.6),
            L.latLng(58.401, 15.6),
            L.latLng(58.401, 15.601),
          ],
        ],
      ];

      expect(() => {
        polydraw.addAutoPolygon(invalidPolygon);
      }).toThrow();
    });

    it('should reject polygons with insufficient points', () => {
      const tooFewPoints: any = [
        [
          [
            L.latLng(58.4, 15.6),
            L.latLng(58.401, 15.6),
            L.latLng(58.4, 15.6), // Only 2 unique points
          ],
        ],
      ];

      expect(() => {
        polydraw.addAutoPolygon(tooFewPoints);
      }).toThrow();
    });

    it('should handle empty polygon arrays', () => {
      expect(() => {
        polydraw.addAutoPolygon([]);
      }).toThrow();
    });
  });

  describe('Polydraw state after adding polygons', () => {
    it('should maintain correct state after adding valid polygon', () => {
      const octagon: L.LatLng[][][] = [
        [
          [
            L.latLng(58.404493, 15.6),
            L.latLng(58.402928, 15.602928),
            L.latLng(58.4, 15.604493),
            L.latLng(58.397072, 15.602928),
            L.latLng(58.395507, 15.6),
            L.latLng(58.397072, 15.597072),
            L.latLng(58.4, 15.595507),
            L.latLng(58.402928, 15.597072),
            L.latLng(58.404493, 15.6),
          ],
        ],
      ];

      polydraw.addAutoPolygon(octagon);

      // Verify polydraw is still functional
      expect(polydraw.getDrawMode).toBeDefined();
      expect(typeof polydraw.getDrawMode()).toBe('number');
    });

    it('should allow clearing all polygons', () => {
      const octagon: L.LatLng[][][] = [
        [
          [
            L.latLng(58.404493, 15.6),
            L.latLng(58.402928, 15.602928),
            L.latLng(58.4, 15.604493),
            L.latLng(58.397072, 15.602928),
            L.latLng(58.395507, 15.6),
            L.latLng(58.397072, 15.597072),
            L.latLng(58.4, 15.595507),
            L.latLng(58.402928, 15.597072),
            L.latLng(58.404493, 15.6),
          ],
        ],
      ];

      polydraw.addAutoPolygon(octagon);

      expect(() => {
        polydraw.removeAllFeatureGroups();
      }).not.toThrow();
    });
  });
});
