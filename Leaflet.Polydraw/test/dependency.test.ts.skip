import { describe, it, expect } from 'vitest';
import { readFileSync, existsSync, readdirSync, statSync } from 'fs';

describe('Dependency validation for Polydraw plugin', () => {
  const bannedModules = [
    '@turf/turf',
    'lodash',
    'moment',
    'underscore',
    'ramda',
    'axios',
    'jquery',
  ];

  describe('1. Disallowed node_modules folders', () => {
    for (const mod of bannedModules) {
      it(`should NOT have "${mod}" installed in node_modules`, () => {
        const modPath = `node_modules/${mod}`;
        expect(existsSync(modPath)).toBe(false);
      });
    }
  });

  describe('2. Forbidden dependencies in package.json', () => {
    const pkg = JSON.parse(readFileSync('package.json', 'utf8'));
    const allDeps = {
      ...pkg.dependencies,
      ...pkg.devDependencies,
      ...pkg.peerDependencies,
      ...pkg.optionalDependencies,
    };

    for (const dep of bannedModules) {
      it(`should NOT declare "${dep}" as a dependency`, () => {
        expect(allDeps[dep]).toBeUndefined();
      });
    }
  });

  describe('3. Modular Turf usage enforcement', () => {
    it('should only include used Turf modules (not whole @turf/turf)', () => {
      const turfPath = 'node_modules/@turf';
      if (existsSync(turfPath)) {
        const modules = readdirSync(turfPath);
        expect(modules.length).toBeGreaterThan(0);
        expect(modules).not.toContain('turf');
      }
    });
  });

  //   describe('4. Bundle size check (UMD)', () => {
  //     it('should keep UMD bundle size under 100 KB (gzipped)', () => {
  //       const path = 'dist/polydraw.umd.js';
  //       if (existsSync(path)) {
  //         const stats = statSync(path);
  //         expect(stats.size).toBeLessThan(100 * 1024); // 100 KB
  //       }
  //     });
  //   });
});
